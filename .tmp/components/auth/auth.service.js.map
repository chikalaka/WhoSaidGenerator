{"version":3,"sources":["../../../client/components/auth/auth.service.js"],"names":[],"mappings":"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","file":"auth.service.js","sourcesContent":["'use strict';\r\n\r\n(function() {\r\n\r\n  function AuthService($location, $http, $cookies, $q, appConfig, Util, User) {\r\n    var safeCb = Util.safeCb;\r\n    var currentUser = {};\r\n    var userRoles = appConfig.userRoles || [];\r\n\r\n    if ($cookies.get('token') && $location.path() !== '/logout') {\r\n      currentUser = User.get();\r\n    }\r\n\r\n    var Auth = {\r\n\r\n      /**\r\n       * Authenticate user and save token\r\n       *\r\n       * @param  {Object}   user     - login info\r\n       * @param  {Function} callback - optional, function(error, user)\r\n       * @return {Promise}\r\n       */\r\n      login({\r\n        email,\r\n        password\r\n      }, callback) {\r\n        return $http.post('/auth/local', {\r\n            email: email,\r\n            password: password\r\n          })\r\n          .then(res => {\r\n            $cookies.put('token', res.data.token);\r\n            currentUser = User.get();\r\n            return currentUser.$promise;\r\n          })\r\n          .then(user => {\r\n            safeCb(callback)(null, user);\r\n            return user;\r\n          })\r\n          .catch(err => {\r\n            Auth.logout();\r\n            safeCb(callback)(err.data);\r\n            return $q.reject(err.data);\r\n          });\r\n      },\r\n\r\n      /**\r\n       * Delete access token and user info\r\n       */\r\n      logout() {\r\n        $cookies.remove('token');\r\n        currentUser = {};\r\n      },\r\n\r\n      /**\r\n       * Create a new user\r\n       *\r\n       * @param  {Object}   user     - user info\r\n       * @param  {Function} callback - optional, function(error, user)\r\n       * @return {Promise}\r\n       */\r\n      createUser(user, callback) {\r\n        return User.save(user, function(data) {\r\n            $cookies.put('token', data.token);\r\n            currentUser = User.get();\r\n            return safeCb(callback)(null, user);\r\n          }, function(err) {\r\n            Auth.logout();\r\n            return safeCb(callback)(err);\r\n          })\r\n          .$promise;\r\n      },\r\n\r\n      /**\r\n       * Change password\r\n       *\r\n       * @param  {String}   oldPassword\r\n       * @param  {String}   newPassword\r\n       * @param  {Function} callback    - optional, function(error, user)\r\n       * @return {Promise}\r\n       */\r\n      changePassword(oldPassword, newPassword, callback) {\r\n        return User.changePassword({\r\n            id: currentUser._id\r\n          }, {\r\n            oldPassword: oldPassword,\r\n            newPassword: newPassword\r\n          }, function() {\r\n            return safeCb(callback)(null);\r\n          }, function(err) {\r\n            return safeCb(callback)(err);\r\n          })\r\n          .$promise;\r\n      },\r\n\r\n      /**\r\n       * Gets all available info on a user\r\n       *   (synchronous|asynchronous)\r\n       *\r\n       * @param  {Function|*} callback - optional, funciton(user)\r\n       * @return {Object|Promise}\r\n       */\r\n      getCurrentUser(callback) {\r\n        if (arguments.length === 0) {\r\n          return currentUser;\r\n        }\r\n\r\n        var value = currentUser.hasOwnProperty('$promise') ? currentUser.$promise : currentUser;\r\n        return $q.when(value)\r\n          .then(user => {\r\n            safeCb(callback)(user);\r\n            return user;\r\n          }, () => {\r\n            safeCb(callback)({});\r\n            return {};\r\n          });\r\n      },\r\n\r\n      /**\r\n       * Check if a user is logged in\r\n       *   (synchronous|asynchronous)\r\n       *\r\n       * @param  {Function|*} callback - optional, function(is)\r\n       * @return {Bool|Promise}\r\n       */\r\n      isLoggedIn(callback) {\r\n        if (arguments.length === 0) {\r\n          return currentUser.hasOwnProperty('role');\r\n        }\r\n\r\n        return Auth.getCurrentUser(null)\r\n          .then(user => {\r\n            var is = user.hasOwnProperty('role');\r\n            safeCb(callback)(is);\r\n            return is;\r\n          });\r\n      },\r\n\r\n      /**\r\n       * Check if a user has a specified role or higher\r\n       *   (synchronous|asynchronous)\r\n       *\r\n       * @param  {String}     role     - the role to check against\r\n       * @param  {Function|*} callback - optional, function(has)\r\n       * @return {Bool|Promise}\r\n       */\r\n      hasRole(role, callback) {\r\n        var hasRole = function(r, h) {\r\n          return userRoles.indexOf(r) >= userRoles.indexOf(h);\r\n        };\r\n\r\n        if (arguments.length < 2) {\r\n          return hasRole(currentUser.role, role);\r\n        }\r\n\r\n        return Auth.getCurrentUser(null)\r\n          .then(user => {\r\n            var has = user.hasOwnProperty('role') ? hasRole(user.role, role) : false;\r\n            safeCb(callback)(has);\r\n            return has;\r\n          });\r\n      },\r\n\r\n      /**\r\n       * Check if a user is an admin\r\n       *   (synchronous|asynchronous)\r\n       *\r\n       * @param  {Function|*} callback - optional, function(is)\r\n       * @return {Bool|Promise}\r\n       */\r\n      isAdmin() {\r\n        return Auth.hasRole.apply(Auth, [].concat.apply(['admin'], arguments));\r\n      },\r\n\r\n      /**\r\n       * Get auth token\r\n       *\r\n       * @return {String} - a token string used for authenticating\r\n       */\r\n      getToken() {\r\n        return $cookies.get('token');\r\n      }\r\n    };\r\n\r\n    return Auth;\r\n  }\r\n\r\n  angular.module('whoSaidApp.auth')\r\n    .factory('Auth', AuthService);\r\n})();\r\n"]}